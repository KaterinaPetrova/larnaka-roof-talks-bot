import logging
from datetime import datetime, timedelta
from aiogram import Bot
from config import WAITLIST_TIMEOUT_HOURS, NOTIFICATION_CHAT_ID
from database.db import get_event, get_registration, update_waitlist_status
from keyboards.keyboards import get_waitlist_notification_keyboard
from utils.logging import log_exception

# Initialize logger
logger = logging.getLogger(__name__)

async def send_registration_confirmation(bot: Bot, user_id: int, event_id: int, role: str):
    """Send confirmation message after successful registration."""
    event = await get_event(event_id)

    # Handle case when event is None
    if not event:
        logger.error(f"Event {event_id} not found when sending registration confirmation to user {user_id}")
        message = (
            f"–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞)! üéâ\n"
            f"–ú—ã –Ω–∞–ø–æ–º–Ω–∏–º —Ç–µ–±–µ –±–ª–∏–∂–µ –∫ –¥–∞—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n"
            f"–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∫—Ä—ã—à–µ!"
        )
    elif role == "speaker":
        message = (
            f"–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞) –∫–∞–∫ —Å–ø–∏–∫–µ—Ä! üéâ\n"
            f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']} ‚Äî {event['date']}\n"
            f"–ú—ã –Ω–∞–ø–æ–º–Ω–∏–º —Ç–µ–±–µ –±–ª–∏–∂–µ –∫ –¥–∞—Ç–µ.\n"
            f"–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∫—Ä—ã—à–µ!"
        )
    else:
        message = (
            f"–¢—ã –≤ —Å–ø–∏—Å–∫–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π! üî•\n"
            f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']} ‚Äî {event['date']}\n"
            f"–ü—Ä–∏—Ö–æ–¥–∏, –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!"
        )

    try:
        await bot.send_message(user_id, message)
        logger.warning(f"Sent registration confirmation to user {user_id} for event {event_id}")
    except Exception as e:
        log_exception(
            exception=e,
            context={
                "message": message,
                "event": event
            },
            user_id=user_id,
            event_id=event_id,
            message="Failed to send registration confirmation"
        )

async def send_waitlist_confirmation(bot: Bot, user_id: int, event_id: int, role: str):
    """Send confirmation message after adding to waitlist."""
    event = await get_event(event_id)

    message = (
        f"–¢—ã –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {event['title']} ‚Äî {event['date']}.\n"
        f"–†–æ–ª—å: {'–°–ø–∏–∫–µ—Ä' if role == 'speaker' else '–°–ª—É—à–∞—Ç–µ–ª—å'}\n"
        f"–ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –æ—Ç–º–µ–Ω–∏—Ç —É—á–∞—Å—Ç–∏–µ ‚Äî –º—ã –Ω–∞–ø–∏—à–µ–º —Ç–µ–±–µ!"
    )

    try:
        await bot.send_message(user_id, message)
        logger.warning(f"Sent waitlist confirmation to user {user_id} for event {event_id}")
    except Exception as e:
        log_exception(
            exception=e,
            context={
                "message": message,
                "event": event
            },
            user_id=user_id,
            event_id=event_id,
            message="Failed to send waitlist confirmation"
        )

async def send_waitlist_notification(bot: Bot, user_id: int, waitlist_id: int, event_id: int, role: str):
    """Send notification to the next person in waitlist."""
    event = await get_event(event_id)

    message = (
        f"–ü–æ—è–≤–∏–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ {event['title']} ‚Äî {event['date']}!\n"
        f"–†–æ–ª—å: {'–°–ø–∏–∫–µ—Ä' if role == 'speaker' else '–°–ª—É—à–∞—Ç–µ–ª—å'}\n"
        f"–•–æ—á–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?\n\n"
        f"–£ —Ç–µ–±—è –µ—Å—Ç—å {WAITLIST_TIMEOUT_HOURS} —á–∞—Å–∞ –Ω–∞ –æ—Ç–≤–µ—Ç."
    )

    keyboard = get_waitlist_notification_keyboard(waitlist_id)

    try:
        await bot.send_message(user_id, message, reply_markup=keyboard)

        # Update waitlist status to notified
        notified_at = datetime.now().isoformat()
        await update_waitlist_status(waitlist_id, "notified", notified_at)

        logger.warning(f"Sent waitlist notification to user {user_id} for event {event_id}")
    except Exception as e:
        log_exception(
            exception=e,
            context={
                "message": message,
                "event": event,
                "waitlist_id": waitlist_id,
                "role": role,
                "keyboard": str(keyboard)
            },
            user_id=user_id,
            event_id=event_id,
            message="Failed to send waitlist notification"
        )


async def send_talk_update_confirmation(bot: Bot, user_id: int, registration_id: int, field: str):
    """Send confirmation after talk update."""
    registration = await get_registration(registration_id)
    event = await get_event(registration["event_id"])

    field_name = {
        "topic": "—Ç–µ–º–∞",
        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ",
        "has_presentation": "—Å–ª–∞–π–¥—ã"
    }.get(field, field)

    message = (
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–µ–º –¥–æ–∫–ª–∞–¥–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n"
        f"–ò–∑–º–µ–Ω–µ–Ω–æ –ø–æ–ª–µ: {field_name}\n"
        f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']} ‚Äî {event['date']}"
    )

    try:
        await bot.send_message(user_id, message)
        logger.warning(f"Sent talk update confirmation to user {user_id} for registration {registration_id}")
    except Exception as e:
        log_exception(
            exception=e,
            context={
                "message": message,
                "registration": registration,
                "registration_id": registration_id,
                "field": field
            },
            user_id=user_id,
            event_id=registration.get("event_id") if registration else None,
            message="Failed to send talk update confirmation"
        )

async def send_cancellation_confirmation(bot: Bot, user_id: int, event_id: int, role: str):
    """Send confirmation after registration cancellation."""
    event = await get_event(event_id)

    role_text = "—Å–ø–∏–∫–µ—Ä–∞" if role == "speaker" else "—É—á–∞—Å—Ç–Ω–∏–∫–∞"
    message = (
        f"–¢–≤–æ—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {role_text} –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event['title']} ‚Äî {event['date']} –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
        f"–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –º–æ–∂–µ—à—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –±—É–¥—É—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞."
    )

    try:
        await bot.send_message(user_id, message)
        logger.warning(f"Sent cancellation confirmation to user {user_id} for event {event_id}")
    except Exception as e:
        log_exception(
            exception=e,
            context={
                "message": message,
                "event": event,
                "role": role
            },
            user_id=user_id,
            event_id=event_id,
            message="Failed to send cancellation confirmation"
        )


async def check_expired_waitlist_notifications(bot: Bot):
    """Check for expired waitlist notifications and update their status.

    First, process all expired waitlist entries by updating their status and sending notifications.
    Then, check for available spots in each event/role and notify users from the waitlist.
    """
    from database.db import (
        get_expired_waitlist_notifications, 
        update_expired_waitlist_entry,
        get_available_spots,
        get_next_from_waitlist,
        get_event_waitlist,
        count_notified_waitlist_users
    )
    from config import WAITLIST_TIMEOUT_HOURS
    from datetime import datetime, timedelta
    from utils.text_constants import WAITLIST_EXPIRED_MESSAGE
    from collections import defaultdict

    logger = logging.getLogger(__name__)

    logger.warning(f"Starting waitlist scheduler check at {datetime.now().isoformat()}")
    processed_count = 0

    try:
        # Calculate the expiration time
        expiration_time = (datetime.now() - timedelta(hours=WAITLIST_TIMEOUT_HOURS)).isoformat()
        logger.warning(f"Checking for waitlist notifications that expired before {expiration_time}")

        # Step 1: Get all expired waitlist entries
        expired_entries = await get_expired_waitlist_notifications(expiration_time)
        logger.warning(f"Found {len(expired_entries)} expired waitlist notifications")

        # Track events and roles that had expirations
        affected_events = defaultdict(set)

        # Step 2: Process each expired entry
        for entry in expired_entries:
            # Update status to expired
            success = await update_expired_waitlist_entry(entry["id"])
            if not success:
                logger.error(f"Failed to update waitlist entry {entry['id']} to expired")
                continue

            # Send expiration notification to the user
            try:
                await bot.send_message(entry["user_id"], WAITLIST_EXPIRED_MESSAGE)
                logger.warning(f"Sent expiration notification to user {entry['user_id']} for event {entry['event_id']}")
            except Exception as e:
                logger.error(f"Failed to send expiration notification to user {entry['user_id']}: {str(e)}")

            # Track this event/role combination for later processing
            affected_events[entry["event_id"]].add(entry["role"])

            logger.warning(f"Expired waitlist entry {entry['id']} for user {entry['user_id']} and event {entry['event_id']}")
            processed_count += 1

        # Step 3: For each affected event/role, check available spots and notify waitlisted users
        for event_id, roles in affected_events.items():
            for role in roles:
                # Check how many spots are available
                available_spots = await get_available_spots(event_id, role)

                if available_spots <= 0:
                    logger.warning(f"No available spots for event {event_id} with role {role}")
                    continue

                # Get count of already notified users
                already_notified_count = await count_notified_waitlist_users(event_id, role)

                # Calculate actual available spots considering already notified users
                actual_available_spots = max(0, available_spots - already_notified_count)

                logger.warning(f"Found {available_spots} available spots for event {event_id} with role {role}, "
                              f"with {already_notified_count} already notified users. "
                              f"Actual available spots: {actual_available_spots}")

                if actual_available_spots <= 0:
                    logger.warning(f"No actual available spots for event {event_id} with role {role} after considering notified users")
                    continue

                # Get users from waitlist for this event and role
                waitlist_entries = await get_event_waitlist(event_id, role)

                # Notify up to actual_available_spots users
                notified_count = 0
                for entry in waitlist_entries:
                    if notified_count >= actual_available_spots:
                        break

                    # Only notify users with 'active' status
                    if entry["status"] != "active":
                        continue

                    # Send notification to the user
                    try:
                        await send_waitlist_notification(
                            bot,
                            entry["user_id"],
                            entry["id"],
                            entry["event_id"],
                            entry["role"]
                        )
                        logger.warning(f"Notified user {entry['user_id']} from waitlist for event {entry['event_id']} with role {entry['role']}")
                        notified_count += 1
                    except Exception as e:
                        logger.error(f"Failed to send waitlist notification to user {entry['user_id']}: {str(e)}")

                logger.warning(f"Notified {notified_count} users from waitlist for event {event_id} with role {role} (out of {actual_available_spots} actual available spots)")

        logger.warning(f"Waitlist scheduler check completed. Processed {processed_count} expired notifications.")
        return processed_count
    except Exception as e:
        log_exception(
            exception=e,
            context={
                "expiration_time": expiration_time if 'expiration_time' in locals() else None
            },
            message="Error checking expired waitlist notifications"
        )
        logger.warning(f"Waitlist scheduler check failed with error: {str(e)}")
        return 0

async def send_admin_notification(bot: Bot, notification_type: str, event_id: int, user_info: dict, role: str = None, additional_info: str = None):
    """Send notification to admin chat about changes in participants or speakers.

    Args:
        bot: Bot instance
        notification_type: Type of notification (registration, cancellation, update, waitlist)
        event_id: ID of the event
        user_info: Dictionary with user information (first_name, last_name, etc.)
        role: Role of the user (speaker or participant)
        additional_info: Any additional information to include in the notification
    """
    if not NOTIFICATION_CHAT_ID:
        logger.warning("NOTIFICATION_CHAT_ID not set, skipping admin notification")
        return

    try:
        event = await get_event(event_id)
        if not event:
            logger.error(f"Failed to get event {event_id} for admin notification")
            return

        user_name = f"{user_info.get('first_name', '')} {user_info.get('last_name', '')}"
        username_display = f" (@{user_info.get('username')})" if user_info.get('username') else ""
        role_text = "—Å–ø–∏–∫–µ—Ä–∞" if role == "speaker" else "—É—á–∞—Å—Ç–Ω–∏–∫–∞"

        if notification_type == "registration":
            message = (
                f"üÜï –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {role_text}!\n"
                f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']} ({event['date']})\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}{username_display}"
            )
            if role == "speaker" and user_info.get('topic'):
                message += f"\n–¢–µ–º–∞: {user_info.get('topic')}"

        elif notification_type == "cancellation":
            message = (
                f"‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {role_text}!\n"
                f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']} ({event['date']})\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}{username_display}"
            )
            if role == "speaker" and user_info.get('topic'):
                message += f"\n–¢–µ–º–∞: {user_info.get('topic')}"

        elif notification_type == "update":
            message = (
                f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ {role_text}!\n"
                f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']} ({event['date']})\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}{username_display}"
            )
            if additional_info:
                message += f"\n–ò–∑–º–µ–Ω–µ–Ω–æ: {additional_info}"

        elif notification_type == "waitlist":
            message = (
                f"‚è≥ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–Ω–∏—è!\n"
                f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']} ({event['date']})\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}{username_display}\n"
                f"–†–æ–ª—å: {'–°–ø–∏–∫–µ—Ä' if role == 'speaker' else '–£—á–∞—Å—Ç–Ω–∏–∫'}"
            )
            if role == "speaker" and user_info.get('topic'):
                message += f"\n–¢–µ–º–∞: {user_info.get('topic')}"
        else:
            message = (
                f"‚ÑπÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!\n"
                f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']} ({event['date']})\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}{username_display}\n"
                f"–î–µ–π—Å—Ç–≤–∏–µ: {notification_type}"
            )

        await bot.send_message(NOTIFICATION_CHAT_ID, message)
        logger.warning(f"Sent admin notification about {notification_type} for event {event_id}")
    except Exception as e:
        log_exception(
            exception=e,
            context={
                "notification_type": notification_type,
                "user_info": user_info,
                "role": role,
                "additional_info": additional_info,
                "message": message if 'message' in locals() else None
            },
            event_id=event_id,
            message="Failed to send admin notification"
        )
