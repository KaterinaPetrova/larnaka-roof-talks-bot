import logging
from datetime import datetime, timedelta
from aiogram import Bot
from config import WAITLIST_TIMEOUT_HOURS, NOTIFICATION_CHAT_ID
from database.db import get_event, get_registration, update_waitlist_status
from keyboards.keyboards import get_waitlist_notification_keyboard

# Initialize logger
logger = logging.getLogger(__name__)

async def send_registration_confirmation(bot: Bot, user_id: int, event_id: int, role: str):
    """Send confirmation message after successful registration."""
    event = await get_event(event_id)

    if role == "speaker":
        message = (
            f"–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞) –∫–∞–∫ —Å–ø–∏–∫–µ—Ä! üéâ\n"
            f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']} ‚Äî {event['date']}\n"
            f"–ú—ã –Ω–∞–ø–æ–º–Ω–∏–º —Ç–µ–±–µ –±–ª–∏–∂–µ –∫ –¥–∞—Ç–µ.\n"
            f"–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∫—Ä—ã—à–µ!"
        )
    else:
        message = (
            f"–¢—ã –≤ —Å–ø–∏—Å–∫–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π! üî•\n"
            f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']} ‚Äî {event['date']}\n"
            f"–ü—Ä–∏—Ö–æ–¥–∏, –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!"
        )

    try:
        await bot.send_message(user_id, message)
        logger.info(f"Sent registration confirmation to user {user_id} for event {event_id}")
    except Exception as e:
        logger.error(f"Failed to send registration confirmation: {e}")

async def send_waitlist_confirmation(bot: Bot, user_id: int, event_id: int, role: str):
    """Send confirmation message after adding to waitlist."""
    event = await get_event(event_id)

    message = (
        f"–¢—ã –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {event['title']} ‚Äî {event['date']}.\n"
        f"–†–æ–ª—å: {'–°–ø–∏–∫–µ—Ä' if role == 'speaker' else '–°–ª—É—à–∞—Ç–µ–ª—å'}\n"
        f"–ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –æ—Ç–º–µ–Ω–∏—Ç —É—á–∞—Å—Ç–∏–µ ‚Äî –º—ã –Ω–∞–ø–∏—à–µ–º —Ç–µ–±–µ!"
    )

    try:
        await bot.send_message(user_id, message)
        logger.info(f"Sent waitlist confirmation to user {user_id} for event {event_id}")
    except Exception as e:
        logger.error(f"Failed to send waitlist confirmation: {e}")

async def send_waitlist_notification(bot: Bot, user_id: int, waitlist_id: int, event_id: int, role: str):
    """Send notification to the next person in waitlist."""
    event = await get_event(event_id)

    message = (
        f"–ü–æ—è–≤–∏–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ {event['title']} ‚Äî {event['date']}!\n"
        f"–†–æ–ª—å: {'–°–ø–∏–∫–µ—Ä' if role == 'speaker' else '–°–ª—É—à–∞—Ç–µ–ª—å'}\n"
        f"–•–æ—á–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?\n\n"
        f"–£ —Ç–µ–±—è –µ—Å—Ç—å 2 —á–∞—Å–∞ –Ω–∞ –æ—Ç–≤–µ—Ç."
    )

    keyboard = get_waitlist_notification_keyboard(waitlist_id)

    try:
        await bot.send_message(user_id, message, reply_markup=keyboard)

        # Update waitlist status to notified
        notified_at = datetime.now().isoformat()
        await update_waitlist_status(waitlist_id, "notified", notified_at)

        logger.info(f"Sent waitlist notification to user {user_id} for event {event_id}")
    except Exception as e:
        logger.error(f"Failed to send waitlist notification: {e}")


async def send_talk_update_confirmation(bot: Bot, user_id: int, registration_id: int, field: str):
    """Send confirmation after talk update."""
    registration = await get_registration(registration_id)
    event = await get_event(registration["event_id"])

    field_name = {
        "topic": "—Ç–µ–º–∞",
        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ",
        "has_presentation": "—Å–ª–∞–π–¥—ã"
    }.get(field, field)

    message = (
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–µ–º –¥–æ–∫–ª–∞–¥–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n"
        f"–ò–∑–º–µ–Ω–µ–Ω–æ –ø–æ–ª–µ: {field_name}\n"
        f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']} ‚Äî {event['date']}"
    )

    try:
        await bot.send_message(user_id, message)
        logger.info(f"Sent talk update confirmation to user {user_id} for registration {registration_id}")
    except Exception as e:
        logger.error(f"Failed to send talk update confirmation: {e}")

async def send_cancellation_confirmation(bot: Bot, user_id: int, event_id: int, role: str):
    """Send confirmation after registration cancellation."""
    event = await get_event(event_id)

    role_text = "—Å–ø–∏–∫–µ—Ä–∞" if role == "speaker" else "—É—á–∞—Å—Ç–Ω–∏–∫–∞"
    message = (
        f"–¢–≤–æ—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {role_text} –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event['title']} ‚Äî {event['date']} –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
        f"–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –º–æ–∂–µ—à—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –±—É–¥—É—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞."
    )

    try:
        await bot.send_message(user_id, message)
        logger.info(f"Sent cancellation confirmation to user {user_id} for event {event_id}")
    except Exception as e:
        logger.error(f"Failed to send cancellation confirmation: {e}")


async def check_expired_waitlist_notifications(bot: Bot):
    """Check for expired waitlist notifications and update their status."""
    from database.db import get_next_from_waitlist
    import aiosqlite
    from config import DB_NAME, WAITLIST_TIMEOUT_HOURS
    from datetime import datetime, timedelta

    logger = logging.getLogger(__name__)

    try:
        # Calculate the expiration time
        expiration_time = (datetime.now() - timedelta(hours=WAITLIST_TIMEOUT_HOURS)).isoformat()

        async with aiosqlite.connect(DB_NAME) as db:
            db.row_factory = aiosqlite.Row

            # Find all expired waitlist notifications
            cursor = await db.execute(
                "SELECT * FROM waitlist WHERE status = 'notified' AND notified_at < ?",
                (expiration_time,)
            )
            expired_entries = await cursor.fetchall()

            for entry in expired_entries:
                # Update status to expired
                await db.execute(
                    "UPDATE waitlist SET status = 'expired' WHERE id = ?",
                    (entry["id"],)
                )

                # Check if there's another person on the waitlist
                next_waitlist = await get_next_from_waitlist(entry["event_id"], entry["role"])

                if next_waitlist:
                    # Send notification to the next person on the waitlist
                    await send_waitlist_notification(
                        bot,
                        next_waitlist["user_id"],
                        next_waitlist["id"],
                        next_waitlist["event_id"],
                        next_waitlist["role"]
                    )

                    logger.info(f"Notified next person {next_waitlist['user_id']} on waitlist for event {next_waitlist['event_id']} after expiration")

                logger.info(f"Expired waitlist entry {entry['id']} for user {entry['user_id']} and event {entry['event_id']}")

            await db.commit()

            return len(expired_entries)
    except Exception as e:
        logger.error(f"Error checking expired waitlist notifications: {e}")
        return 0

async def send_admin_notification(bot: Bot, notification_type: str, event_id: int, user_info: dict, role: str = None, additional_info: str = None):
    """Send notification to admin chat about changes in participants or speakers.

    Args:
        bot: Bot instance
        notification_type: Type of notification (registration, cancellation, update, waitlist)
        event_id: ID of the event
        user_info: Dictionary with user information (first_name, last_name, etc.)
        role: Role of the user (speaker or participant)
        additional_info: Any additional information to include in the notification
    """
    if not NOTIFICATION_CHAT_ID:
        logger.warning("NOTIFICATION_CHAT_ID not set, skipping admin notification")
        return

    try:
        event = await get_event(event_id)
        if not event:
            logger.error(f"Failed to get event {event_id} for admin notification")
            return

        user_name = f"{user_info.get('first_name', '')} {user_info.get('last_name', '')}"
        role_text = "—Å–ø–∏–∫–µ—Ä–∞" if role == "speaker" else "—É—á–∞—Å—Ç–Ω–∏–∫–∞"

        if notification_type == "registration":
            message = (
                f"üÜï –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {role_text}!\n"
                f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']} ({event['date']})\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}"
            )
            if role == "speaker" and user_info.get('topic'):
                message += f"\n–¢–µ–º–∞: {user_info.get('topic')}"

        elif notification_type == "cancellation":
            message = (
                f"‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {role_text}!\n"
                f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']} ({event['date']})\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}"
            )
            if role == "speaker" and user_info.get('topic'):
                message += f"\n–¢–µ–º–∞: {user_info.get('topic')}"

        elif notification_type == "update":
            message = (
                f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ {role_text}!\n"
                f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']} ({event['date']})\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}"
            )
            if additional_info:
                message += f"\n–ò–∑–º–µ–Ω–µ–Ω–æ: {additional_info}"

        elif notification_type == "waitlist":
            message = (
                f"‚è≥ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–Ω–∏—è!\n"
                f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']} ({event['date']})\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
                f"–†–æ–ª—å: {'–°–ø–∏–∫–µ—Ä' if role == 'speaker' else '–£—á–∞—Å—Ç–Ω–∏–∫'}"
            )
            if role == "speaker" and user_info.get('topic'):
                message += f"\n–¢–µ–º–∞: {user_info.get('topic')}"
        else:
            message = (
                f"‚ÑπÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!\n"
                f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']} ({event['date']})\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
                f"–î–µ–π—Å—Ç–≤–∏–µ: {notification_type}"
            )

        await bot.send_message(NOTIFICATION_CHAT_ID, message)
        logger.info(f"Sent admin notification about {notification_type} for event {event_id}")
    except Exception as e:
        logger.error(f"Failed to send admin notification: {e}")
